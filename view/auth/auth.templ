package auth

import (
  "ftgodev-tut/view/layout"
  "github.com/nedpals/supabase-go"
)

templ AccountSetup() {
  @layout.App(true) {
    <div class="max-w-xl bg-base-300 px-6 py-12 w-full mx-auto mt-4 rounded-xl">
      <h1 class="text-xl font-black mb-8 text-center">Setup Account</h1>
      @AccountSetupForm(AccountSetupParams{}, AccountSetupErrors{}) 
    </div>
  }
}
type AccountSetupErrors struct {
  Username string
}

type AccountSetupParams struct {
  Username string
}

templ AccountSetupForm(params AccountSetupParams, errors AccountSetupErrors) {
  <form
    hx-post="/account/setup"
    hx-swap="outerHTML"
  >
    <label class="form-control w-full max-w-xs">
        <div class="label">
          <span class="label-text">Username:</span>
        </div>
        <input class="input input-bordered" type="text" name="username" />
        <div class="label">
          if len(errors.Username) >0 {
            <span class="label-text text-error">{ errors.Username }</span>
          }
        </div>
    </label>
    <button class="btn btn-primary">setup account <i class="fa-solid fa-arrow-right"></i></button>
   </form>

}

templ Login() {
  @layout.App(false)
  <div class="flex justify-center mt-[calc(100vh-100vh+2rem)]">
    <div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
      <h1 class="text-center text-xl font-black">Login to ftgodev-tut</h1>
      <div>
        @LoginForm(supabase.UserCredentials{}, LoginErrors{})
      </div>
    </div>
  </div>
}


templ Signup() {
  @layout.App(false)
  <div class="flex justify-center mt-[calc(100vh-100vh+2rem)]">
    <div class="max-w-md w-full bg-base-300 py-12 px-8 rounded-xl">
      <h1 class="text-center text-xl font-black">Sign up</h1>
      <div>
        @SignupForm(SignupParams{}, SignupErrors{})
      </div>
    </div>
  </div>
}

templ SignupSuccess(email string) {
  <div>A confirmation email has been sent to:
    <span class="font-semibold text-success" >{ email }</span>
 </div>
}

type LoginErrors struct {
  Email        string
  InvalidCreds string
}

type SignupErrors struct {
  Email           string
  InvalidCreds    string
}

type SignupParams struct {
  Email           string
}

templ SignupForm(params SignupParams, errors SignupErrors) {
  <form
    hx-post="/signup" 
    hx-swap=""
    class="space-y-4"
  >
    <div class="w-full">
      <div class="label">
        <span class="label-text">e-mail</span>
      </div>
      <input
        type="email"
        name="email"
        value={params.Email}
        required
        autocomplete="off"
        placeholder="abc@domain.com"
        class="input input-bordered w-full"
      />
      if len(errors.Email) > 0 {
        <div class="label">
          <span class="label-text-alt text-error">{errors.Email}</span>
        </div>
      }
    </div>
    <button class="btn btn-primary w-full">
      sign up 
    </button>
      </form>
}

templ LoginForm(creds supabase.UserCredentials, errors LoginErrors) {
  <form
    hx-post="/login" 
    hx-swap="outerHTML"
    class="space-y-4"
  >
    <div class="w-full"> 
      <div class="label">
        <span class="label-text">e-mail</span>
      </div>
      <input
        type="email"
        name="email"
        value={creds.Email}
        required
        autocomplete="off"
        placeholder="abc@domain.com"
        class="input input-bordered w-full"
      />
      if len(errors.Email) > 0 {
        <div class="label">
          <span class="label-text-alt text-error">{errors.Email}</span>
        </div>
      }
    </div>
      if len(errors.InvalidCreds) > 0 {
        <div class="text-sm text-error">{errors.InvalidCreds}</div>
      }
    <button class="btn btn-primary w-full">login<i class="fa-solid fa-arrow-right"></i></button>
    <div class="divider">OR</div>
    <a href="/login/provider/google" class="btn btn-outline w-full">login with google<i class="fa-brands fa-google"></i></a>
  </form>
}

templ MagicLinkSuccess(email string) {
  <div>
    An email with magic login link has been sent to <span class="text-info">{email}</span>
  </div>
}


templ CallbackScript() {
  <script>
    var url = window.location.href;
    var newURL = url.replace("#", "?")
    window.location = newURL
  </script>
}
