package generate


import (
  "fmt" 
  "ftgodev-tut/view/layout"
  "ftgodev-tut/models"
  "ftgodev-tut/view"
  "ftgodev-tut/view/ui"
)


type ViewData struct {
  Images      []models.Image
  FormErrors  FormErrors
  FormParams  FormParams
}

templ Index(data ViewData) {
  @layout.App(true) {
    <div class="flex w-full h-[calc(100vh-69px)]">
      <div class="w-[400px] border-r border-app p-4">
        @Form(data.FormParams, data.FormErrors)
      </div>
      <div class="flex-1 bg-base-300">
      @Gallery(data.Images)
    </div>
  </div>
  }
}

type FormParams struct {
  Prompt string
  Amount int
}

type FormErrors struct {
  Prompt  string
  Amount  string 
  AdditionalCreditsNeeded int 
}

var amounts = []string { "1", "2", "5"}

    //hx-target="#gallery"
templ Form(params FormParams, errors FormErrors) {
  <form
    hx-post="/generate"
    hx-swap="outerHTML"
  >
    <div>
      <label class="form-control">
        <div class="label">
          <span class="label-text">enter your prompt</span>
        </div>
        <textarea
          class="textarea textarea-bordered h-24"
          placehodler="fire truck in fist fight"
          name="prompt"
        >
          { params.Prompt }
        </textarea>
        if len(errors.Prompt) > 0 {
          <div class="label">
            <span class="label-text text-error">{ errors.Prompt }</span>
          </div>
        }
      </label>
      <label class="form-control my-4">
        <div class="label">
          <span class="label-text">Pick a thing</span>
        </div>
       <div class="join">
       for _, amount := range amounts {
          <input
            class="join-item btn"
            type="radio"
            name="amount"
            if view.String(params.Amount) == amount {
              checked
            }
            value={ amount }
            aria-label={ amount }
          />
       }
       </div>
        if len(errors.Amount) > 0 {
          <div class="label">
            <span class="label-text text-error">{ errors.Amount}</span>
          </div>
        }

       </label>
      <button class="btn btn-primary w-full mt-4">generate<i class="fa-solid fa-arrow-right"></i></button>
    </div>
  </form>
  if errors.AdditionalCreditsNeeded > 0  {
    @ui.CreditsModal(errors.AdditionalCreditsNeeded)
  }
}

templ Gallery(images []models.Image) {
  <div class="grid grid-cols-4 p-4 gap-4 w-full" id="gallery">
  for _, image := range images {
    @GalleryImage(image)
  }
  </div>
}


templ GalleryImage(image models.Image) {
  if image.Status == models.ImageStatusCompleted {
    <div class="aspect-square rounded-xl">
      <img class="object-cover rounded-xl" src={image.Location}/>
    </div>
  } else if image.Status == models.ImageStatusFailed{
    <div class="bg-base-100 aspect-square rounded-xl flex justify-center items-center cursor-pointer">
      <i class="fa-solid fa-bomb"></i>
    </div>
   } else if image.Status == models.ImageStatusPending{
     // this div is going to poll every second
    <div
      hx-get={fmt.Sprintf("/generate/image/status/%d", image.ID)}
      hx-trigger="load delay:3s" 
      class="bg-base-100 aspect-square rounded-xl flex justify-center items-center"
    >
      <span class="loading loading-spinner loading-lg"></span>
    </div>
  }
}
